unit uController.Procedimento;

interface

uses
  uInterfaces.ProcedimentoController,
  uModel.Procedimento,
  uDAO.Procedimento;

type
  TProcedimentoController = class(TInterfacedObject, IProcedimentoController)
  private
    FDAO: TProcedimentoDAO;
  public
    constructor Create;
    destructor Destroy; override;

    procedure Inserir(AProcedimento: TProcedimento);
    procedure Atualizar(AProcedimento: TProcedimento);
    procedure Excluir(ID: Integer);
    function BuscarPorID(ID: Integer): TProcedimento;
  end;

implementation

{ TProcedimentoController }

constructor TProcedimentoController.Create;
begin
  FDAO := TProcedimentoDAO.Create;
end;

destructor TProcedimentoController.Destroy;
begin
  FDAO.Free;
  inherited;
end;

procedure TProcedimentoController.Inserir(AProcedimento: TProcedimento);
begin
  FDAO.Inserir(AProcedimento);
end;

procedure TProcedimentoController.Atualizar(AProcedimento: TProcedimento);
begin
  FDAO.Atualizar(AProcedimento);
end;

procedure TProcedimentoController.Excluir(ID: Integer);
begin
  FDAO.Excluir(ID);
end;

function TProcedimentoController.BuscarPorID(ID: Integer): TProcedimento;
begin
  Result := FDAO.BuscarPorID(ID);
end;

end.
